import base64
import json
import requests

OLLAMA_URL = 'http://localhost:11434/api/generate'


def generate_outfit_with_ollama(prompt_text: str, items: list, wardrobe_list: dict):

    prompt = (
        "–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π fashion-—Å—Ç–∏–ª–∏—Å—Ç. –í–æ—Ç –≥–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"{wardrobe_list.items()}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n\"{prompt_text}\"\n\n"
        "1. –í—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –≤–µ—â–∏ –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ —Å–æ–±—ã—Ç–∏—é. "
        "–ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π –≤–µ—â–∏, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. "
        "–ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ 1, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. "
        "–∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –æ–¥–µ–∂–¥—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Å–µ–∑–æ–Ω—É (–ª–µ—Ç–æ, –∑–∏–º–∞, –≤–µ—Å–Ω–∞ –∏ —Ç.–¥.)"
        "–ø–µ—Ä–µ—á–∏—Å–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ—â–∏, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ –ø–æ–≥–æ–¥–µ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"
        "–ü–û–ú–ù–ò –ß–¢–û –¢–í–û–ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û–í–õ–ò–Ø–Æ–¢ –ù–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"
        "–í–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–µ—â–µ–π (–≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∫ –≤ —Å–ø–∏—Å–∫–µ –≤—ã—à–µ).\n\n"
        "2. –ó–∞—Ç–µ–º –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "- –ö–∞–∫ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–∑\n"
        "- –ö–∞–∫ —ç—Ç–∏ –≤–µ—â–∏ –ª—É—á—à–µ –Ω–æ—Å–∏—Ç—å\n"
        "- –ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –∏ –∞–∫—Ü–µ–Ω—Ç—ã –ø–æ–¥–æ–π–¥—É—Ç\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "---\n"
        "üì∏ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–µ—â–∏:\n"
        "- filename1.jpg\n"
        "- filename2.jpg\n"
        "(–∏–ª–∏: ‚ùå –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–µ—â–µ–π –Ω–µ—Ç)\n\n"
        "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
        "–¢–µ–∫—Å—Ç —Å–æ–≤–µ—Ç–æ–≤...\n"
        "---\n"
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –¥—Ä—É–≥–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, emoji, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ‚Äî —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω."
    )

    data = {
        "model": "llama3.2:latest",
        "prompt": prompt,
        "stream": True
    }

    try:
        response = requests.post(OLLAMA_URL, json=data, stream=True)
        response.raise_for_status()

        full_response = ""
        for line in response.iter_lines():
            if line:
                chunk = json.loads(line.decode("utf-8"))
                full_response += chunk.get("response", "")

        return full_response.strip()
    except Exception as e:
        print(f"[Ollama error] {e}")
        return None


def analyze_clothing_item(file_path: str) -> dict:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ gemma3.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–µ—â–∏, —Ç–µ–≥–∞–º–∏, —Å–µ–∑–æ–Ω–æ–º –∏ –ø–æ–ª–æ–º.
    """
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
    with open(file_path, "rb") as image_file:
        image_bytes = image_file.read()
    image_base64 = base64.b64encode(image_bytes).decode("utf-8")

    # –ü—Ä–æ–º—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ –≤–µ—â–∏ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON
    prompt = (
        "–¢—ã fashion-–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã. "
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç—Ä–æ–≥–æ –≤ –≤–∏–¥–µ JSON –æ–±—ä–µ–∫—Ç–∞ —Å –ø–æ–ª—è–º–∏:\n"
        "description: —Å—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –æ–¥–µ–∂–¥—ã,\n"
        "tags: —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤,\n"
        "season: —Å–ø–∏—Å–æ–∫ —Å–µ–∑–æ–Ω–æ–≤ (–∑–∏–º–∞, –ª–µ—Ç–æ, –≤–µ—Å–Ω–∞, –æ—Å–µ–Ω—å),\n"
        "sex: –º—É–∂—Å–∫–æ–π, –∂–µ–Ω—Å–∫–∏–π –∏–ª–∏ —É–Ω–∏—Å–µ–∫—Å.\n"
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤, –∫—Ä–æ–º–µ JSON!"
    )

    data = {
        "model": "gemma3",
        "prompt": prompt,
        "images": [image_base64]
    }

    response = requests.post("http://localhost:11434/api/generate", json=data)
    response.raise_for_status()

    full_response = ""
    for line in response.iter_lines():
        if line:
            chunk = json.loads(line.decode("utf-8"))
            full_response += chunk.get("response", "")

    # –í—ã—Ä–µ–∑–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
    try:
        json_start = full_response.find("{")
        json_end = full_response.rfind("}") + 1
        item_metadata = json.loads(full_response[json_start:json_end])
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–æ–ª–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π
    required_keys = {"description", "tags", "season", "sex"}
    if not required_keys.issubset(item_metadata.keys()):
        raise ValueError(f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è: {required_keys}")

    return item_metadata
